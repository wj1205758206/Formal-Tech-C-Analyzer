[kernel] Parsing tests/syntax/gcc_builtins.c (with preprocessing)
/* Generated by Frama-C */
#include "stdint.h"
/* compiler builtin: 
   short __sync_add_and_fetch_int16_t(short *ptr, short value,
                                      void * const *__va_params);   */
/* compiler builtin: 
   int __sync_add_and_fetch_int32_t(int *ptr, int value,
                                    void * const *__va_params);   */
/* compiler builtin: 
   long long __sync_add_and_fetch_int64_t(long long *ptr, long long value,
                                          void * const *__va_params);   */
/* compiler builtin: 
   int __sync_bool_compare_and_swap_uint16_t(unsigned short *ptr,
                                             unsigned short oldval,
                                             unsigned short newval,
                                             void * const *__va_params);   */
/* compiler builtin: 
   int __sync_bool_compare_and_swap_uint32_t(unsigned int *ptr,
                                             unsigned int oldval,
                                             unsigned int newval,
                                             void * const *__va_params);   */
/* compiler builtin: 
   int __sync_bool_compare_and_swap_uint64_t(unsigned long long *ptr,
                                             unsigned long long oldval,
                                             unsigned long long newval,
                                             void * const *__va_params);   */
/* compiler builtin: 
   short __sync_fetch_and_add_int16_t(short *ptr, short value,
                                      void * const *__va_params);   */
/* compiler builtin: 
   int __sync_fetch_and_add_int32_t(int *ptr, int value,
                                    void * const *__va_params);   */
/* compiler builtin: 
   long long __sync_fetch_and_add_int64_t(long long *ptr, long long value,
                                          void * const *__va_params);   */
/* compiler builtin: 
   short __sync_fetch_and_sub_int16_t(short *ptr, short value,
                                      void * const *__va_params);   */
/* compiler builtin: 
   int __sync_fetch_and_sub_int32_t(int *ptr, int value,
                                    void * const *__va_params);   */
/* compiler builtin: 
   long long __sync_fetch_and_sub_int64_t(long long *ptr, long long value,
                                          void * const *__va_params);   */
/* compiler builtin: 
   short __sync_sub_and_fetch_int16_t(short *ptr, short value,
                                      void * const *__va_params);   */
/* compiler builtin: 
   int __sync_sub_and_fetch_int32_t(int *ptr, int value,
                                    void * const *__va_params);   */
/* compiler builtin: 
   long long __sync_sub_and_fetch_int64_t(long long *ptr, long long value,
                                          void * const *__va_params);   */
short __sync_fetch_and_add_int16_t(short *ptr, short value,
                                   void * const *__va_params)
{
  int16_t tmp = *ptr;
  *ptr = (short)((int)*ptr + (int)value);
  return tmp;
}

short __sync_fetch_and_sub_int16_t(short *ptr, short value,
                                   void * const *__va_params)
{
  int16_t tmp = *ptr;
  *ptr = (short)((int)*ptr - (int)value);
  return tmp;
}

int __sync_fetch_and_add_int32_t(int *ptr, int value,
                                 void * const *__va_params)
{
  int32_t tmp = *ptr;
  *ptr += value;
  return tmp;
}

int __sync_fetch_and_sub_int32_t(int *ptr, int value,
                                 void * const *__va_params)
{
  int32_t tmp = *ptr;
  *ptr -= value;
  return tmp;
}

long long __sync_fetch_and_add_int64_t(long long *ptr, long long value,
                                       void * const *__va_params)
{
  int64_t tmp = *ptr;
  *ptr += value;
  return tmp;
}

long long __sync_fetch_and_sub_int64_t(long long *ptr, long long value,
                                       void * const *__va_params)
{
  int64_t tmp = *ptr;
  *ptr -= value;
  return tmp;
}

short __sync_add_and_fetch_int16_t(short *ptr, short value,
                                   void * const *__va_params)
{
  short __retres;
  *ptr = (short)((int)*ptr + (int)value);
  __retres = *ptr;
  return __retres;
}

short __sync_sub_and_fetch_int16_t(short *ptr, short value,
                                   void * const *__va_params)
{
  short __retres;
  *ptr = (short)((int)*ptr - (int)value);
  __retres = *ptr;
  return __retres;
}

int __sync_add_and_fetch_int32_t(int *ptr, int value,
                                 void * const *__va_params)
{
  int __retres;
  *ptr += value;
  __retres = *ptr;
  return __retres;
}

int __sync_sub_and_fetch_int32_t(int *ptr, int value,
                                 void * const *__va_params)
{
  int __retres;
  *ptr -= value;
  __retres = *ptr;
  return __retres;
}

long long __sync_add_and_fetch_int64_t(long long *ptr, long long value,
                                       void * const *__va_params)
{
  long long __retres;
  *ptr += value;
  __retres = *ptr;
  return __retres;
}

long long __sync_sub_and_fetch_int64_t(long long *ptr, long long value,
                                       void * const *__va_params)
{
  long long __retres;
  *ptr -= value;
  __retres = *ptr;
  return __retres;
}

int __sync_bool_compare_and_swap_uint16_t(unsigned short *ptr,
                                          unsigned short oldval,
                                          unsigned short newval,
                                          void * const *__va_params)
{
  int __retres;
  if ((int)*ptr == (int)oldval) {
    *ptr = newval;
    __retres = 1;
    goto return_label;
  }
  else {
    __retres = 0;
    goto return_label;
  }
  return_label: return __retres;
}

int __sync_bool_compare_and_swap_uint32_t(unsigned int *ptr,
                                          unsigned int oldval,
                                          unsigned int newval,
                                          void * const *__va_params)
{
  int __retres;
  if (*ptr == oldval) {
    *ptr = newval;
    __retres = 1;
    goto return_label;
  }
  else {
    __retres = 0;
    goto return_label;
  }
  return_label: return __retres;
}

int __sync_bool_compare_and_swap_uint64_t(unsigned long long *ptr,
                                          unsigned long long oldval,
                                          unsigned long long newval,
                                          void * const *__va_params)
{
  int __retres;
  if (*ptr == oldval) {
    *ptr = newval;
    __retres = 1;
    goto return_label;
  }
  else {
    __retres = 0;
    goto return_label;
  }
  return_label: return __retres;
}

void main(void)
{
  int tmp;
  {
    int16_t result;
    int16_t content = (short)100;
    int16_t *ptr = & content;
    int16_t value = (short)33;
    {
      void *__va_args[1] = {(void *)0};
      result = __sync_fetch_and_add_int16_t(ptr,value,
                                            (void * const *)(__va_args));
    }
    /*@ assert result ≡ 100 ∧ content ≡ 133; */ ;
    {
      void *__va_args_35[1] = {(void *)0};
      result = __sync_fetch_and_add_int16_t(ptr,(short)(-11),
                                            (void * const *)(__va_args_35));
    }
    /*@ assert result ≡ 133 ∧ content ≡ 122; */ ;
    {
      void *__va_args_37[1] = {(void *)0};
      result = __sync_fetch_and_sub_int16_t(ptr,value,
                                            (void * const *)(__va_args_37));
    }
    /*@ assert result ≡ 122 ∧ content ≡ 89; */ ;
    {
      void *__va_args_39[1] = {(void *)0};
      result = __sync_fetch_and_sub_int16_t(ptr,(short)(-11),
                                            (void * const *)(__va_args_39));
    }
    /*@ assert result ≡ 89 ∧ content ≡ 100; */ ;
  }
  {
    int32_t result_0;
    int32_t content_0 = 100;
    int32_t *ptr_0 = & content_0;
    int32_t value_0 = 33;
    {
      void *__va_args_41[1] = {(void *)0};
      result_0 = __sync_fetch_and_add_int32_t(ptr_0,value_0,
                                              (void * const *)(__va_args_41));
    }
    /*@ assert result_0 ≡ 100 ∧ content_0 ≡ 133; */ ;
    {
      void *__va_args_43[1] = {(void *)0};
      result_0 = __sync_fetch_and_add_int32_t(ptr_0,-11,
                                              (void * const *)(__va_args_43));
    }
    /*@ assert result_0 ≡ 133 ∧ content_0 ≡ 122; */ ;
    {
      void *__va_args_45[1] = {(void *)0};
      result_0 = __sync_fetch_and_sub_int32_t(ptr_0,value_0,
                                              (void * const *)(__va_args_45));
    }
    /*@ assert result_0 ≡ 122 ∧ content_0 ≡ 89; */ ;
    {
      void *__va_args_47[1] = {(void *)0};
      result_0 = __sync_fetch_and_sub_int32_t(ptr_0,-11,
                                              (void * const *)(__va_args_47));
    }
    /*@ assert result_0 ≡ 89 ∧ content_0 ≡ 100; */ ;
  }
  {
    int64_t result_1;
    int64_t content_1 = (long long)100;
    int64_t *ptr_1 = & content_1;
    int64_t value_1 = (long long)33;
    {
      void *__va_args_49[1] = {(void *)0};
      result_1 = __sync_fetch_and_add_int64_t(ptr_1,value_1,
                                              (void * const *)(__va_args_49));
    }
    /*@ assert result_1 ≡ 100 ∧ content_1 ≡ 133; */ ;
    {
      void *__va_args_51[1] = {(void *)0};
      result_1 = __sync_fetch_and_add_int64_t(ptr_1,(long long)(-11),
                                              (void * const *)(__va_args_51));
    }
    /*@ assert result_1 ≡ 133 ∧ content_1 ≡ 122; */ ;
    {
      void *__va_args_53[1] = {(void *)0};
      result_1 = __sync_fetch_and_sub_int64_t(ptr_1,value_1,
                                              (void * const *)(__va_args_53));
    }
    /*@ assert result_1 ≡ 122 ∧ content_1 ≡ 89; */ ;
    {
      void *__va_args_55[1] = {(void *)0};
      result_1 = __sync_fetch_and_sub_int64_t(ptr_1,(long long)(-11),
                                              (void * const *)(__va_args_55));
    }
    /*@ assert result_1 ≡ 89 ∧ content_1 ≡ 100; */ ;
  }
  {
    int result_2;
    uint16_t content_2 = (unsigned short)100;
    uint16_t *ptr_2 = & content_2;
    uint16_t oldval = (unsigned short)100;
    uint16_t newval = (unsigned short)133;
    {
      void *__va_args_57[1] = {(void *)0};
      result_2 = __sync_bool_compare_and_swap_uint16_t(ptr_2,oldval,newval,
                                                       (void * const *)(__va_args_57));
    }
    /*@ assert result_2 ≡ 1 ∧ *ptr_2 ≡ newval; */ ;
  }
  {
    int result_3;
    uint32_t content_3 = (unsigned int)100;
    uint32_t *ptr_3 = & content_3;
    uint32_t oldval_0 = (unsigned int)100;
    uint32_t newval_0 = (unsigned int)133;
    {
      void *__va_args_59[1] = {(void *)0};
      result_3 = __sync_bool_compare_and_swap_uint32_t(ptr_3,oldval_0,
                                                       newval_0,
                                                       (void * const *)(__va_args_59));
    }
    /*@ assert result_3 ≡ 1 ∧ *ptr_3 ≡ newval_0; */ ;
  }
  {
    int result_4;
    uint64_t content_4 = (unsigned long long)100;
    uint64_t *ptr_4 = & content_4;
    uint64_t oldval_1 = (unsigned long long)100;
    uint64_t newval_1 = (unsigned long long)133;
    {
      void *__va_args_61[1] = {(void *)0};
      result_4 = __sync_bool_compare_and_swap_uint64_t(ptr_4,oldval_1,
                                                       newval_1,
                                                       (void * const *)(__va_args_61));
    }
    /*@ assert result_4 ≡ 1 ∧ *ptr_4 ≡ newval_1; */ ;
  }
  if ((long)(4 == 4)) {
    int x = 1;
  }
  if ((long)(3 == 4)) {
    int x_0 = 0;
  }
  int x_1 = 2;
  ;
  tmp = x_1;
  x_1 ++;
  ;
  if ((long)tmp) {
    int y = x_1;
  }
  return;
}


