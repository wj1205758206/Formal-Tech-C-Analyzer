[kernel] Parsing tests/spec/abrupt.i (no preprocessing)
/* Generated by Frama-C */
int f(int c)
{
  int x = 0;
  /*@ breaks x ≡ 1; */
  if (! c) goto switch_0_0;
  else 
    if (c == 1) goto switch_0_1;
    else 
      if (c == 2) goto switch_0_2;
      else {
        goto switch_0_default;
        goto switch_0_break;
      }
  switch_0_0: x = 1;
  /*@ assert x ≡ 1; */ ;
  goto switch_0_break;
  switch_0_1: x = 3;
  switch_0_2: x ++;
  switch_0_default: x ++;
  switch_0_break: ;
  while (1) {
    while_1_continue: ;
    __sid_13_label: ;
    /*@ breaks x ≡ \old(x);
        continues x ≡ \old(x) + 1; */
    {
      if (x < c) {
        x ++;
        /*@ assert x ≡ \at(x,__sid_13_label) + 1; */ ;
        goto while_1_continue;
      }
      /*@ assert x ≡ \at(x,__sid_13_label); */ ;
      goto while_1_break;
    }
  }
  while_1_break: ;
  return x;
}

/*@ ensures \old(x) ≡ 1 ⇒ \result ≡ 1; */
int f5(int x)
{
  int y = 0;
  if (! (x == 1)) goto switch_0_break;
  switch_0_1:
  while (x > 0) 
    /*@ breaks x > 0; */
    /*@ assert x > 0; */
    goto while_1_break;
  while_1_break: ;
  y = 1;
  switch_0_break: ;
  return y;
}

int job_inline(int a)
{
  int __retres;
  if (a > 10) {
    __retres = 10;
    goto return_label;
  }
  if (a > 20) {
    __retres = 20;
    goto return_label;
  }
  /*@ returns \result ≡ 0;
      ensures \false; */
  {
    __retres = 0;
    /*@ assert __retres ≡ 0; */ ;
    goto return_label;
  }
  return_label: return __retres;
}

int job_block(int a)
{
  int __retres;
  if (a > 10) {
    __retres = 10;
    goto return_label;
  }
  if (a > 20) {
    __retres = 20;
    goto return_label;
  }
  /*@ returns \result ≡ 0;
      ensures \false; */
  {
    __retres = 0;
    /*@ assert __retres ≡ 0; */ ;
    goto return_label;
  }
  return_label: return __retres;
}


