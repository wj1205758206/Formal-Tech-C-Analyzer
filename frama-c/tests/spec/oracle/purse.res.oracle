[kernel] Parsing tests/spec/purse.c (with preprocessing)
/* Generated by Frama-C */
#include "stdlib.h"
struct purse {
   int balance ;
};
typedef struct purse purse;
/*@ predicate purse_inv{L}(purse *p) = \valid(p) ∧ p->balance ≥ 0;

*/
/*@ requires purse_inv(p) ∧ s ≥ 0;
    ensures
      purse_inv(\old(p)) ∧ \old(p)->balance ≡ \old(p->balance) + \old(s);
    assigns p->balance;
 */
void credit(purse *p, int s)
{
  p->balance += s;
  return;
}

/*@ requires purse_inv(p) ∧ s ≥ 0;
    ensures
      purse_inv(\old(p)) ∧ \old(p)->balance ≡ \old(p->balance) + \old(s);
    assigns p->balance;
 */
void f(purse *p, int s)
{
  p->balance += s;
  return;
}

/*@ requires purse_inv(p) ∧ 0 ≤ s ≤ p->balance;
    ensures
      purse_inv(\old(p)) ∧ \old(p)->balance ≡ \old(p->balance) - \old(s);
    assigns p->balance;
 */
void withdraw(purse *p, int s)
{
  p->balance -= s;
  return;
}

/*@ requires purse_inv(p1) ∧ purse_inv(p2);
    ensures \result ≡ 0;
    assigns p1->balance, p2->balance;
 */
int test1(purse *p1, purse *p2)
{
  int __retres;
  p1->balance = 0;
  credit(p2,100);
  __retres = p1->balance;
  return __retres;
}

/*@ ensures
      \fresh{Old, Here}(\result,sizeof(purse)) ∧ purse_inv(\result) ∧
      \result->balance ≡ 0;
    assigns \empty;
 */
purse *new_purse(void)
{
  purse *p = malloc((unsigned int)1 * sizeof(purse));
  p->balance = 0;
  return p;
}

/*@ ensures \result ≡ 150; */
int test2(void)
{
  int __retres;
  purse *p1 = new_purse();
  purse *p2 = new_purse();
  credit(p1,100);
  credit(p2,200);
  withdraw(p1,50);
  withdraw(p2,100);
  __retres = p1->balance + p2->balance;
  return __retres;
}


